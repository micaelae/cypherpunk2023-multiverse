{"version":3,"file":"component---src-pages-index-tsx-2581f491071863d4916c.js","mappings":"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","sources":["webpack://site/./src/pages/index.tsx"],"sourcesContent":["import { useContext, useState } from 'react';\nimport styled from 'styled-components';\nimport { MetamaskActions, MetaMaskContext } from '../hooks';\nimport {\n  connectSnap,\n  getSnap,\n  sendHello,\n  sendIo,\n  sendTxData,\n  shouldDisplayReconnectButton,\n} from '../utils';\nimport {\n  ConnectButton,\n  InstallFlaskButton,\n  ReconnectButton,\n  SendHelloButton,\n  Card,\n} from '../components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex: 1;\n  margin-top: 7.6rem;\n  margin-bottom: 7.6rem;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding-left: 2.4rem;\n    padding-right: 2.4rem;\n    margin-top: 2rem;\n    margin-bottom: 2rem;\n    width: auto;\n  }\n`;\n\nconst Heading = styled.h1`\n  margin-top: 0;\n  margin-bottom: 2.4rem;\n  text-align: center;\n`;\n\nconst Span = styled.span`\n  color: ${(props) => props.theme.colors.primary.default};\n`;\n\nconst CardContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  max-width: 64.8rem;\n  width: 100%;\n  height: 100%;\n  margin-top: 1.5rem;\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: ${({ theme }) => theme.colors.error.muted};\n  border: 1px solid ${({ theme }) => theme.colors.error.default};\n  color: ${({ theme }) => theme.colors.error.alternative};\n  border-radius: ${({ theme }) => theme.radii.default};\n  padding: 2.4rem;\n  margin-bottom: 2.4rem;\n  margin-top: 2.4rem;\n  max-width: 60rem;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.small} {\n    padding: 1.6rem;\n    margin-bottom: 1.2rem;\n    margin-top: 1.2rem;\n    max-width: 100%;\n  }\n`;\n\nconst Index = () => {\n  const [state, dispatch] = useContext(MetaMaskContext);\n\n  const handleConnectClick = async () => {\n    try {\n      await connectSnap();\n      const installedSnap = await getSnap();\n\n      dispatch({\n        type: MetamaskActions.SetInstalled,\n        payload: installedSnap,\n      });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: MetamaskActions.SetError, payload: e });\n    }\n  };\n\n  const [input1, setInput1] = useState('');\n  const [input2, setInput2] = useState('');\n\n  const handleInput1Change = async (e: any) => {\n    try {\n      console.log(e.target.value);\n      setInput1(e.target.value);\n      const io = await sendIo(e.target.value);\n      console.log('=====', io);\n    } catch (error: any) {\n      console.error(error);\n      dispatch({ type: MetamaskActions.SetError, payload: error });\n    }\n  };\n\n  const handleInput2Change = (e: any) => {\n    setInput2(e.target.value);\n  };\n\n  return (\n    <Container>\n      <Heading>\n        Welcome to <Span>Multiverse</Span>\n      </Heading>\n      <CardContainer>\n        {state.error && (\n          <ErrorMessage>\n            <b>An error happened:</b> {state.error.message}\n          </ErrorMessage>\n        )}\n        {!state.isFlask && (\n          <Card\n            content={{\n              title: 'Install',\n              description:\n                'Snaps is pre-release software only available in MetaMask Flask, a canary distribution for developers with access to upcoming features.',\n              button: <InstallFlaskButton />,\n            }}\n            fullWidth\n          />\n        )}\n        {!state.installedSnap && (\n          <Card\n            content={{\n              title: 'Connect',\n              description:\n                'Get started by connecting to and installing the example snap.',\n              button: (\n                <ConnectButton\n                  onClick={handleConnectClick}\n                  disabled={!state.isFlask}\n                />\n              ),\n            }}\n            disabled={!state.isFlask}\n          />\n        )}\n\n        <Card\n          content={{\n            title: 'Input 1',\n            description: 'Enter txData to simulate and send to the snap.',\n            inputField: (\n              <textarea\n                id=\"input1\"\n                value={input1}\n                onChange={handleInput1Change}\n              />\n            ),\n            button: (\n              <button\n                onClick={async () => {\n                  await sendTxData([input1]);\n                }}\n              >\n                Simulate and send\n              </button>\n            ),\n          }}\n          disabled={!state.installedSnap}\n        />\n\n        <Card\n          content={{\n            title: 'Input 2',\n            description: 'Enter txData to simulate and send to the snap.',\n            inputField: (\n              <textarea\n                id=\"input2\"\n                value={input2}\n                onChange={handleInput2Change}\n              />\n            ),\n            button: (\n              <button\n                onClick={async () => {\n                  const x = await sendTxData([input2]);\n                  console.log(x);\n                }}\n              >\n                Simulate and send\n              </button>\n            ),\n          }}\n          disabled={!state.installedSnap}\n        />\n        {shouldDisplayReconnectButton(state.installedSnap) && (\n          <Card\n            content={{\n              title: 'Reconnect',\n              description:\n                'While connected to a local running snap this button will always be displayed in order to update the snap if a change is made.',\n              button: (\n                <ReconnectButton\n                  onClick={handleConnectClick}\n                  disabled={!state.installedSnap}\n                />\n              ),\n            }}\n            disabled={!state.installedSnap}\n          />\n        )}\n      </CardContainer>\n    </Container>\n  );\n};\n\nexport default Index;\n"],"names":["Container","styled","displayName","componentId","theme","mediaQueries","small","Heading","Span","props","colors","primary","default","CardContainer","ErrorMessage","error","muted","alternative","radii","useContext","MetaMaskContext","state","dispatch","handleConnectClick","_context","connectSnap","getSnap","installedSnap","type","MetamaskActions","payload","console","useState","input1","setInput1","input2","setInput2","handleInput1Change","e","_context2","log","target","value","sendIo","io","_jsxs","children","_jsx","message","isFlask","Card","content","title","description","button","InstallFlaskButton","fullWidth","ConnectButton","onClick","disabled","inputField","id","onChange","_context3","sendTxData","_context4","x","shouldDisplayReconnectButton","ReconnectButton"],"sourceRoot":""}